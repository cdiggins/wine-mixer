Observations:
* Adding wine is pointless, unless you are going to mix it with something immediately.
* Removing wine is pointless, unless you are going add wine into it or combine into it
* Splitting wine is pointless, unless you are going to mix one of its containers immediately. 
* Most of what we do is combine wines 
* It is possible to get in a state where we can't mix more wines 
* If you don't split wines, never worry about dumping wines 
* Mixing a wine A, with another wine B or C, will not necessarily be better if mixed with B if B is better than C. 
* Adding a wine means it should be mixed with the previous wine, or the next wine (otherwise don't add it).
	* This reduces considering the same path too many times, and being inefficient. 
* Instead of removing wine, we can just add to an existing wine spot.
* Instead of re
* To get a perfect match, we will have to add every wine. 


Hypothesis
* Mixing two tanks should always produce wine that is of better quality than before
* The greedy approach is not always the best. 
* Having a variety of wines, might be better than just distance. 
* When making a choice of what Wine to add ... it would be best to try wines that haven't been used yet. 
* This all looks a bit like the traveling salesman problem ... 
* Adding the most common wine first, might make the most sense. Easiest to get the amount right. 
	* Similar to sorting by the best possible direction. 
* We could maybe compute how close all of the wines are to the target. 
* Computing the total mix of wine can give us an estimate of how close we could potentially get. 
	* I think I would use that to evaluate a state. 
	* This is done by combining all of the wines 

Process Example
* There are N * M starting states (N tanks, M wines). 
* The first thing to do is add a wine A
* Then another A, B
* Then you combine it C 
* Then you add more wine C, D 
* Then you either:
	* Mix it (E)
	* Or add more wine C,D,E 
		* Either mix D,E = C,F 
		* or mix C,E = D,F

* You either:
	* Mix existing wines
	* Add a new wine, and mix 
	* Add two new wines and mix them 

//== 

There should be a bonus for using more wines. 

I am considering transitions that have no hope ... maybe deleting some of them would be a good idea? 
I need to not sort so much. 
Splitting would be good. 
My current system is not good. 

//==

TODO: 
* Multiple tank combines. 

//== 

What is the distance between two wines. 

What happens when I add two wines. 
* Adding a worse wine to another wine, makes it worse.
* However, it may be desirable to have a small amount of this worse wine for mixing purposes. 

If I have the perfect wine what happens?
* Adding a non-perfect wine makes it worse

Somehow considering the sizes of the tanks for everything is important. 
* Maybe there is a score I can give a state based on: 
	* How much of all the wine it has. 

The questions are: 
* Can I combine any more wines? 

What if I:
* Separate the way that wines are combined, from the actual wines that are combined. 

All of a sudden we can consider different possibilities. 

The possibilities however get a bit complicated. 

This would massively reduce the search space. 

Given a list of tanks, what are the valid combination sizes. 
Given the valid combination sizes, what are the kinds of blends I can make. 

//==

The number of possible sets gets big very fast. 

However, I suspect there is a lot of repetition. 

Note that if two tanks are the same size, then they have the same 
tank configuration

//==

Found 0 immediate operations
Found 0 states reachable via combines only
From 0 operations chose 
State 1814 depth=14 volume=102 tanks=10/10
Target is (0.1, 0.15, 0.25, 0.5)
Best mix is (0, 0.302, 0.302, 0.905) of distance 0.222165
Average mix is (0.922, 0.04, 0.04, 0.383) of distance 0.990168
Tank 0 has size 1 and contains (0, 0, 0, 1) of distance 0.545
Tank 1 has size 2 and contains (0, 0, 0, 1) of distance 0.545
Tank 2 has size 3 and contains (1, 0, 0, 0) of distance 1.288
Tank 3 has size 5 and contains (1, 0, 0, 0) of distance 1.288
Tank 4 has size 8 and contains (1, 0, 0, 0) of distance 1.288
Tank 5 has size 10 and contains (1, 0, 0, 0) of distance 1.288
Tank 6 has size 13 and contains (1, 0, 0, 0) of distance 1.288
Tank 7 has size 15 and contains (1, 0, 0, 0) of distance 1.288
Tank 8 has size 20 and contains (1, 0, 0, 0) of distance 1.288
Tank 9 has size 25 and contains (0, 0.302, 0.302, 0.905) of distance 0.222

//==

Introducing Tank Splits plus optimization to get best in smallest tank and things got even better:

Found 0 immediate operations
Found 0 states reachable via combines only
From 0 operations chose 
State 1794 depth=16 volume=102 tanks=10/10
Target is (0.1, 0.15, 0.25, 0.5)
Best mix is (0.255, 0.17, 0.426, 0.851) of distance 0.120386
Average mix is (0.974, 0.02, 0.05, 0.218) of distance 1.114998
Tank 0 has size 1 and contains (0, 0, 0, 1) of distance 0.545
Tank 1 has size 2 and contains (1, 0, 0, 0) of distance 1.288
Tank 2 has size 3 and contains (1, 0, 0, 0) of distance 1.288
Tank 3 has size 5 and contains (1, 0, 0, 0) of distance 1.288
Tank 4 has size 8 and contains (1, 0, 0, 0) of distance 1.288
Tank 5 has size 10 and contains (1, 0, 0, 0) of distance 1.288
Tank 6 has size 13 and contains (1, 0, 0, 0) of distance 1.288
Tank 7 has size 15 and contains (1, 0, 0, 0) of distance 1.288
Tank 8 has size 20 and contains (0.255, 0.17, 0.426, 0.851) of distance 0.12
Tank 9 has size 25 and contains (1, 0, 0, 0) of distance 1.288

Found 0 immediate operations
Found 0 states reachable via combines only
From 0 operations chose 
